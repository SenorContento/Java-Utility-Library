box: debian
build:
  steps:
    - script:
        name: Install Software Properties (To Add Repos - Only Works on Mainstream Distributions for Mainstream Only Repos - No Overrides)
        code: apt-get update && apt-get install -y software-properties-common
    - script:
        name: Add Repo (with Jessie-Backports for OpenJDK-8)
        code: apt-add-repository -s 'deb http://deb.debian.org/debian jessie-backports main'
    - script:
        name: Install Tools
        code: apt-get update && apt-get install -y openjdk-8-jre-headless openjdk-8-jdk && rm -rf /var/lib/apt/lists/*
    - script:
        name: Compile and Jar Utilities
        code: cd ./src/jar/ && javac -encoding UTF-8 $(find | grep "\.java") && jar -cf ../utilities.jar $(find | grep "\.class")


deploy:
  #steps: #steps is to deploy when a branch that does not exist is called.


  stable:
    - script:
        name: Install Software Properties (To Add Repos - Only Works on Mainstream Distributions for Mainstream Only Repos - No Overrides)
        code: apt-get update && apt-get install -y software-properties-common
    - script:
        name: Add Repo (with Jessie-Backports for OpenJDK-8)
        code: apt-add-repository -s 'deb http://deb.debian.org/debian jessie-backports main'
    - script:
        name: Install Tools
        code: apt-get update && apt-get install -y curl file zip locales openjdk-8-jre-headless openjdk-8-jdk ruby && rm -rf /var/lib/apt/lists/*
    - script:
        name: Move Jar for Tar Command
        code: mv ./src/utilities.jar .

    - script:
        name: Create Needed Directories for DEBIAN (as Git removes them for being empty)
        code: mkdir -p ./Utilities/DEBIAN/
    - script:
        name: Create Needed Directories (as Git removes them for being empty)
        code: mkdir -p ./Utilities/usr/lib/senor/

    # Create Control File - YAML does not like colons, then spaces, so waiting for the fix - https://github.com/ansible/ansible/issues/1104
    - script:
        name: Write Package Name
        code: echo "Package:sc-utility-jar" > ./Utilities/DEBIAN/control
    - script:
        name: Add Version Number
        code: echo "Version:$(./version)" >> ./Utilities/DEBIAN/control
    - script:
        name: Add Architecture
        code: echo "Architecture:all" >> ./Utilities/DEBIAN/control
    - script:
        name: Add Essential Tag
        code: echo "Essential:no" >> ./Utilities/DEBIAN/control
    - script:
        name: Add Section
        code: echo "Section:development" >> ./Utilities/DEBIAN/control
    - script:
        name: Add Priority Tag
        code: echo "Priority:optional" >> ./Utilities/DEBIAN/control
    - script:
        name: Add My Name
        code: echo "Maintainer:Brandon Gomez" >> ./Utilities/DEBIAN/control
    - script:
        name: Add Description
        code: echo "Description:Brandon's Utility Library" >> ./Utilities/DEBIAN/control
    # End Create Control File

    - script:
        name: Put into Debian Package
        code: cp ./utilities.jar ./Utilities/usr/lib/senor/
    - script:
        name: Create MD5Sum
        code: cd ./Utilities/ && find . -type f ! -regex '.*.hg.*' ! -regex '.*?debian-binary.*' ! -regex '.*?DEBIAN.*' -printf '%P ' | xargs md5sum > DEBIAN/md5sums
    - script:
        name: Build Package
        code: dpkg -b ./Utilities/ sc-utility-jar.deb
    - script:
        name: Install Package
        code: dpkg -i sc-utility-jar.deb
    - script:
        name: Compile Demo
        code: cd ./src/ && javac -cp ".:/usr/lib/senor/utilities.jar" main.java
    - script:
        name: Test Demo
        code: cd ./src/ && java -cp ".:/usr/lib/senor/utilities.jar" main

    - script:
        name: Create Tar
        code: tar cfv binaries-v$(./version).tar utilities.jar sc-utility-jar.deb
    - script:
        name: Create Zip
        code: zip -j binaries-v$(./version).zip utilities.jar sc-utility-jar.deb
    - script:
        name: Versioning
        code: export APP_VERSION=$(./version)

    - github-create-release:
        token: $GITHUB_TOKEN
        tag: v$(echo $APP_VERSION)
    - github-upload-asset:
        token: $GITHUB_TOKEN
        file: binaries-v$(./version).tar
        release_id: $WERCKER_GITHUB_CREATE_RELEASE_ID
    - github-upload-asset:
        token: $GITHUB_TOKEN
        file: binaries-v$(./version).zip
        release_id: $WERCKER_GITHUB_CREATE_RELEASE_ID

    # Fixing Locales
    - script:
        name: Display Locales
        code: locale
    - script:
        name: Generate Locale
        code: locale-gen --purge en_US.UTF-8
    - script:
        name: Reading Default Locale
        code: cat /etc/default/locale
    - script:
        name: Setting Default Locale
        code: echo -e 'LANG="en_US.UTF-8"\nLANGUAGE="en_US.UTF-8"\n' > /etc/default/locale
    - script:
        name: Reading Default Locale (Again)
        code: cat /etc/default/locale
    - script:
        name: Source Default Locale
        code: . /etc/default/locale
    # End Fixing Locales

    - script:
        name: Testing UTF-8
        code: perl -Mcharnames=:full -CS -wle 'print "\N{EURO SIGN}"'
    
    # Push Newly Generated Deb to APT Repository
    - script:
        name: Install Package Cloud
        code: gem install package_cloud
    - script:
        name: Upload to Package Cloud
        code: package_cloud push SenorContento/Software/debian/jessie sc-utility-jar.deb
    # End Push Newly Generated Deb to APT Repository

  nightly:
    - script:
        name: Install Software Properties (To Add Repos - Only Works on Mainstream Distributions for Mainstream Only Repos - No Overrides)
        code: apt-get update && apt-get install -y software-properties-common
    - script:
        name: Add Repo (with Jessie-Backports for OpenJDK-8)
        code: apt-add-repository -s 'deb http://deb.debian.org/debian jessie-backports main'
    - script:
        name: Install Tools
        code: apt-get update && apt-get install -y curl locales libunicode-string-perl file zip openjdk-8-jre-headless openjdk-8-jdk ruby && rm -rf /var/lib/apt/lists/*
    - script:
        name: Date Time Variable
        code: export TIME=$(date +%s)
    - script:
        name: Move Jar for Tar Command
        code: mv ./src/utilities.jar .

    - script:
        name: Create Needed Directories for DEBIAN (as Git removes them for being empty)
        code: mkdir -p ./Utilities/DEBIAN/
    - script:
        name: Create Needed Directories (as Git removes them for being empty)
        code: mkdir -p ./Utilities/usr/lib/senor/

    # Create Control File - YAML does not like colons, then spaces, so waiting for the fix - https://github.com/ansible/ansible/issues/1104
    - script:
        name: Write Package Name
        code: echo "Package:sc-utility-jar" > ./Utilities/DEBIAN/control

    # Old Versioning System for Nightlies! No longer needed since only APT server gets nightlies now!
    #  - script:
    #      name: Add Version Number
    #      code: echo "Version:$(./version)-nightly$(echo $TIME)" >> ./Utilities/DEBIAN/control

    # This is just split to comment out old versioning system for nightlies!
    - script:
        name: Add Version Number
        code: echo "Version:$(./version)" >> ./Utilities/DEBIAN/control
    - script:
        name: Add Architecture
        code: echo "Architecture:all" >> ./Utilities/DEBIAN/control
    - script:
        name: Add Essential Tag
        code: echo "Essential:no" >> ./Utilities/DEBIAN/control
    - script:
        name: Add Section
        code: echo "Section:development" >> ./Utilities/DEBIAN/control
    - script:
        name: Add Priority Tag
        code: echo "Priority:optional" >> ./Utilities/DEBIAN/control
    - script:
        name: Add My Name
        code: echo "Maintainer:Brandon Gomez" >> ./Utilities/DEBIAN/control
    - script:
        name: Add Description
        code: echo "Description:Brandon's Utility Library" >> ./Utilities/DEBIAN/control
    # End Create Control File

    - script:
        name: Put into Debian Package
        code: cp ./utilities.jar ./Utilities/usr/lib/senor/
    - script:
        name: Create MD5Sum
        code: cd ./Utilities/ && find . -type f ! -regex '.*.hg.*' ! -regex '.*?debian-binary.*' ! -regex '.*?DEBIAN.*' -printf '%P ' | xargs md5sum > DEBIAN/md5sums
    - script:
        name: Build Package
        code: dpkg -b ./Utilities/ sc-utility-jar.deb
    - script:
        name: Install Package
        code: dpkg -i sc-utility-jar.deb
    - script:
        name: Compile Demo
        code: cd ./src/ && javac -cp ".:/usr/lib/senor/utilities.jar" main.java
    - script:
        name: Test Demo
        code: cd ./src/ && java -cp ".:/usr/lib/senor/utilities.jar" main

    # This is mainly useless for now since Github releases are disabled for nightlies!
    - script:
        name: Create Tar
        code: tar cfv binaries-v$(./version)-nightly$(echo $TIME).tar utilities.jar sc-utility-jar.deb
    - script:
        name: Create Zip
        code: zip -j binaries-v$(./version)-nightly$(echo $TIME).zip utilities.jar sc-utility-jar.deb
    - script:
        name: Versioning
        code: export APP_VERSION=$(./version)
    
    # Decided to only allow nightly to be placed at https://packagecloud.io/SenorContento/Software-Nightly instead of Github!
    # - github-create-release:
    #     token: $GITHUB_TOKEN
    #     prerelease: true
    #     tag: v$(echo $APP_VERSION)-nightly$(echo $TIME)
    # - github-upload-asset:
    #     token: $GITHUB_TOKEN
    #     file: binaries-v$(./version)-nightly$(echo $TIME).tar
    #     release_id: $WERCKER_GITHUB_CREATE_RELEASE_ID
    # - github-upload-asset:
    #     token: $GITHUB_TOKEN
    #     file: binaries-v$(./version)-nightly$(echo $TIME).zip
    #     release_id: $WERCKER_GITHUB_CREATE_RELEASE_ID

    # Fixing Locales
    - script:
        name: Display Locales
        code: locale
    - script:
        name: Generate Locale
        code: locale-gen --purge en_US.UTF-8
    - script:
        name: Reading Default Locale
        code: cat /etc/default/locale
    - script:
        name: Set Which Locale is Available
        code: sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
    - script:
        name: Reconfigure Locales Package
        code: dpkg-reconfigure --frontend=noninteractive locales
    - script:
        name: Updating Locale to Have en_US.UTF-8
        code: update-locale LANG=en_US.UTF-8
    - script:
        name: Setting Default Locale
        code: echo -e 'LANG="en_US.UTF-8"\nLANGUAGE="en_US.UTF-8"\n' > /etc/default/locale
    - script:
        name: Reading Default Locale (Again)
        code: cat /etc/default/locale
    - script:
        name: Source Default Locale
        code: . /etc/default/locale
    # End Fixing Locales

    - script:
        name: Testing UTF-8
        code: perl -Mcharnames=:full -CS -wle 'print "\N{EURO SIGN}"'

    # Push Newly Generated Deb to APT Repository
    - script:
        name: Install Package Cloud
        code: gem install package_cloud
    - script:
        name: Upload to Package Cloud
        code: package_cloud push SenorContento/Software-Nightly/debian/jessie sc-utility-jar.deb
    # End Push Newly Generated Deb to APT Repository

  # notify slack on successful or failed deploys
  after-steps:
    - slack-notifier:
        url: $SLACK_URL
        username: werckerbot

#Still Working on Below
#I haven't created this file yet, but when I do, it will compile the utility library, export it into tar and zip packages, and even create a debian file for Package Cloud and then upload it to Package Cloud. For Nightlies, it will create a sc-utility-jar-dev package, while the master branch will create a normal sc-utility-jar package. It will also make the source code available to apt, so when one runs apt-get source sc-utility-jar or apt-get source sc-utility-jar-dev, then it will either pull from the master branch (probably for the latest master and not for latest version apt knows about) or the nightly branch.
